<?php

require_once dirname(__FILE__) . '/../../../config/lib/Config.php';
require_once dirname(__FILE__) . '/../../../core/PathService.php';

/**
 * Test class for Config.
 * Generated by PHPUnit on 2012-05-02 at 16:00:14.
 */
class ConfigTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Config
     */
    protected $object;
    protected $objectDefault;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Config::getInstance('../../testfiles/test_config.ini');
        $this->objectDefault = new Config('../../testfiles/test_config_def.ini');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Config::getDBConfig
     * @todo Implement testGetDBConfig().
     */
    public function testGetDBConfig() {
        // Remove the following lines when you implement this test.
        $arr = $this->object->getDBConfig();
        $this->assertEquals('mysql', $arr['dbtype']);
        $this->assertEquals('localhost:3306', $arr['host']);
        $this->assertEquals('test2', $arr['database']);
        $this->assertEquals('root', $arr['id']);
        $this->assertEquals('utf8', $arr['encoding']);
    }

    /**
     * @covers Config::getTimezone
     * @todo Implement testGetTimezone().
     */
    public function testGetTimezone() {
        // Remove the following lines when you implement this test.
        $arr = $this->object->getTimezone();
        $this->assertEquals('America/Los_Angeles', $arr);
    }

    /**
     * @covers Config::getAuthenticationConfig
     * @todo Implement testGetAuthenticationConfig().
     */
    public function testGetAuthenticationConfig() {
        // Remove the following lines when you implement this test.
        $auth = $this->object->getAuthenticationConfig();
        $this->assertEquals('enable', $auth['use_authentication']);
    }

    /**
     * @covers Config::getMVCKeyword
     * @todo Implement testGetMVCKeyword().
     */
    public function testGetMVCKeyword() {
        // Remove the following lines when you implement this test.
        $auth = $this->object->getMVCKeyword();
        $this->assertEquals('md', $auth['module']);
        $this->assertEquals('cl', $auth['controller']);
        $this->assertEquals('at', $auth['action']);
    }

    /**
     * @covers Config::getDefaultModule
     * @todo Implement testGetDefaultModule().
     */
    public function testGetDefaultModule() {
        // Remove the following lines when you implement this test.
        $auth = $this->object->getDefaultModule();
        $this->assertEquals('default', $auth);
    }

    /**
     * @covers Config::getLanguage
     * @todo Implement testGetLanguage().
     */
    public function testGetLanguage() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Config::getLeadFile
     * @todo Implement testGetLeadFile().
     */
    public function testGetLeadFile() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Config::getModuleKeyword
     * @todo Implement testGetModuleKeyword().
     */
    public function testGetModuleKeyword() {
        // Remove the following lines when you implement this test.
        $auth = $this->object->getModuleKeyword();
        $this->assertEquals('md', $auth);
        $auth1 = $this->objectDefault->getModuleKeyword();
        $this->assertEquals('module', $auth1);
    }

    /**
     * @covers Config::getControllerKeyword
     * @todo Implement testGetControllerKeyword().
     */
    public function testGetControllerKeyword() {
        // Remove the following lines when you implement this test.
        $auth = $this->object->getControllerKeyword();
        $this->assertEquals('cl', $auth);
        $auth1 = $this->objectDefault->getControllerKeyword();
        $this->assertEquals('controller', $auth1);
    }

    /**
     * @covers Config::getActionKeyword
     * @todo Implement testGetActionKeyword().
     */
    public function testGetActionKeyword() {
        // Remove the following lines when you implement this test.
        $auth = $this->object->getActionKeyword();
        $this->assertEquals('at', $auth);
        $auth1 = $this->objectDefault->getActionKeyword();
        $this->assertEquals('action', $auth1);
    }

    /**
     * @covers Config::getDefaultLanguage
     * @todo Implement testGetDefaultLanguage().
     */
    public function testGetDefaultLanguage() {
        // Remove the following lines when you implement this test.
        $x = $this->object->getDefaultLanguage();
        $this->assertEquals('zh-TW', $x);
    }

    /**
     * @covers Config::getLanguageFolder
     * @todo Implement testGetLanguageFolder().
     */
    public function testGetLanguageFolder() {
        // Remove the following lines when you implement this test.
        $x = $this->object->getLanguageFolder();
        $this->assertEquals('lang', $x);
    }

    /**
     * @covers Config::getLanguageKeyword
     * @todo Implement testGetLanguageKeyword().
     */
    public function testGetLanguageKeyword() {
        // Remove the following lines when you implement this test.
        $x = $this->object->getLanguageKeyword();
        //$this->assertEquals('lg', $x);
    }

    /**
     * @covers Config::getLanguageKeyword
     * @todo Implement testGetLanguageKeyword().
     */
    public function testGetScriptPlugin() {
        // Remove the following lines when you implement this test.
        $x = $this->object->getScriptPlugin();
        //$this->assertEquals('lg', $x);
    }
}

?>
